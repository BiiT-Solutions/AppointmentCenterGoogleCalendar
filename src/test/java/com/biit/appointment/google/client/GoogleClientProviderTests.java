package com.biit.appointment.google.client;

/*-
 * #%L
 * Google Calendar Client
 * %%
 * Copyright (C) 2025 BiiT Sourcing Solutions S.L.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import com.biit.appointment.core.models.AppointmentDTO;
import com.biit.appointment.google.converter.AppointmentEventConverter;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.model.Event;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.concurrent.Callable;

@Test(groups = {"googleClientTest"})
public class GoogleClientProviderTests {

    private static final String APPOINTMENT_TITLE = "Autogenerated appointment from test";
    private static final String APPOINTMENT_DESCRIPTION = "Generated from GoogleClientTest.java";

    private static final int NUMBER_OF_EVENTS = 10;

    private List<Event> events;

    private Credential credential;

    private Callable<Boolean> eventIsDeleted(GoogleClientProvider googleClientProvider, String eventId) {
        return () -> googleClientProvider.getEvent(eventId, credential) == null;
    }

    @BeforeClass
    public void getCredentials() throws GeneralSecurityException, IOException {
        final NetHttpTransport netHttpTransport = GoogleNetHttpTransport.newTrustedTransport();
        final GoogleClientProvider googleClientProvider = new GoogleClientProvider();
        credential = googleClientProvider.getCredentials(netHttpTransport);
    }

    @Test
    public void getCalendarEvents() throws GeneralSecurityException, IOException {
        final GoogleClientProvider googleClientProvider = new GoogleClientProvider();
        events = googleClientProvider.getEvents(NUMBER_OF_EVENTS, new DateTime(System.currentTimeMillis()), credential);
        googleClientProvider.logEvents(events);
        Assert.assertEquals(events.size(), NUMBER_OF_EVENTS);
    }


    @Test(dependsOnMethods = "getCalendarEvents")
    public void convertEvents() {
        AppointmentEventConverter appointmentEventConverter = new AppointmentEventConverter();
        final List<AppointmentDTO> appointmentDTOs = appointmentEventConverter.convertAll(events);
        Assert.assertEquals(appointmentDTOs.size(), NUMBER_OF_EVENTS);
    }


    @Test(dependsOnMethods = "convertEvents")
    public void getCalendarEventsInInterval() throws GeneralSecurityException, IOException {
        final GoogleClientProvider googleClientProvider = new GoogleClientProvider();
        events = googleClientProvider.getEvents(new DateTime(System.currentTimeMillis()), new DateTime(System.currentTimeMillis()
                //Two days.
                + 2 * 24 * 60 * 60 * 1000), credential);
        googleClientProvider.logEvents(events);
        Assert.assertEquals(events.size(), 2);
    }


    @Test(dependsOnMethods = "convertEvents")
    public void createEvent() throws GeneralSecurityException, IOException {
        AppointmentDTO appointmentDTO = new AppointmentDTO();
        appointmentDTO.setTitle(APPOINTMENT_TITLE);
        appointmentDTO.setDescription(APPOINTMENT_DESCRIPTION);

        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = startTime.plusHours(1);

        appointmentDTO.setStartTime(startTime);
        appointmentDTO.setEndTime(endTime);

        final GoogleClientProvider googleClientProvider = new GoogleClientProvider();
        AppointmentEventConverter appointmentEventConverter = new AppointmentEventConverter();
        String eventId = googleClientProvider.createCalendarEvent(appointmentEventConverter.reverse(appointmentDTO), credential);
        Assert.assertNotNull(eventId);

        Event event = googleClientProvider.getEvent(eventId, credential);
        Assert.assertNotNull(event);
        Assert.assertNotEquals(event.getStatus(), "cancelled");
        Assert.assertEquals(event.getId(), eventId);
        Assert.assertEquals(event.getSummary(), APPOINTMENT_TITLE);
        Assert.assertEquals(event.getDescription(), APPOINTMENT_DESCRIPTION);
        Assert.assertEquals(event.getStart().getDateTime().getValue(), startTime.atZone(ZoneId.systemDefault()).toInstant().getEpochSecond() * 1000);
        Assert.assertEquals(event.getEnd().getDateTime().getValue(), endTime.atZone(ZoneId.systemDefault()).toInstant().getEpochSecond() * 1000);

        googleClientProvider.deleteCalendarEvent(eventId, credential);
        Event cancelledEvent = googleClientProvider.getEvent(eventId, credential);
        Assert.assertEquals(cancelledEvent.getStatus(), "cancelled");
    }


    @Test(dependsOnMethods = "convertEvents")
    public void createAllDayEvent() throws GeneralSecurityException, IOException {
        AppointmentDTO appointmentDTO = new AppointmentDTO();
        appointmentDTO.setTitle(APPOINTMENT_TITLE);
        appointmentDTO.setDescription(APPOINTMENT_DESCRIPTION);

        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = startTime.plusHours(1);

        appointmentDTO.setStartTime(startTime);
        appointmentDTO.setEndTime(endTime);
        appointmentDTO.setAllDay(true);

        final GoogleClientProvider googleClientProvider = new GoogleClientProvider();
        AppointmentEventConverter appointmentEventConverter = new AppointmentEventConverter();
        String eventId = googleClientProvider.createCalendarEvent(appointmentEventConverter.reverse(appointmentDTO), credential);
        Assert.assertNotNull(eventId);

        Event event = googleClientProvider.getEvent(eventId, credential);
        Assert.assertNotNull(event);
        Assert.assertNotEquals(event.getStatus(), "cancelled");
        Assert.assertEquals(event.getId(), eventId);
        Assert.assertEquals(event.getSummary(), APPOINTMENT_TITLE);
        Assert.assertEquals(event.getDescription(), APPOINTMENT_DESCRIPTION);
        Assert.assertEquals(event.getStart().getDate().getValue(), startTime.toLocalDate().atStartOfDay(ZoneId.of("UTC")).toInstant().getEpochSecond() * 1000);
        Assert.assertEquals(event.getEnd().getDate().getValue(), endTime.toLocalDate().atStartOfDay(ZoneId.of("UTC")).toInstant().getEpochSecond() * 1000);


        googleClientProvider.deleteCalendarEvent(eventId, credential);
        Event cancelledEvent = googleClientProvider.getEvent(eventId, credential);
        Assert.assertEquals(cancelledEvent.getStatus(), "cancelled");
    }
}
