package com.biit.appointment.google.client;

import com.biit.appointment.core.models.AppointmentDTO;
import com.biit.appointment.google.converter.AppointmentEventConverter;
import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.model.Event;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;

@Test(groups = {"googleClientTest"})
public class GoogleClientTest {

    private static final String APPOINTMENT_TITLE = "Autogenerated appointment from test";
    private static final String APPOINTMENT_DESCRIPTION = "Generated from GoogleClientTest.java";

    private static final int NUMBER_OF_EVENTS = 10;

    private List<Event> events;

    @Test
    public void getCalendarEvents() throws GeneralSecurityException, IOException {
        final GoogleClient googleClient = new GoogleClient();
        events = googleClient.getEvents(NUMBER_OF_EVENTS, new DateTime(System.currentTimeMillis()));
        googleClient.logEvents(events);
        Assert.assertEquals(events.size(), NUMBER_OF_EVENTS);
    }


    @Test(dependsOnMethods = "getCalendarEvents")
    public void convertEvents() {
        AppointmentEventConverter appointmentEventConverter = new AppointmentEventConverter();
        final List<AppointmentDTO> appointmentDTOs = appointmentEventConverter.convertAll(events);
        Assert.assertEquals(appointmentDTOs.size(), NUMBER_OF_EVENTS);
    }


    @Test
    public void createEvent() throws GeneralSecurityException, IOException {
        AppointmentDTO appointmentDTO = new AppointmentDTO();
        appointmentDTO.setTitle(APPOINTMENT_TITLE);
        appointmentDTO.setDescription(APPOINTMENT_DESCRIPTION);

        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = startTime.plusHours(1);

        appointmentDTO.setStartTime(startTime);
        appointmentDTO.setEndTime(endTime);

        final GoogleClient googleClient = new GoogleClient();
        AppointmentEventConverter appointmentEventConverter = new AppointmentEventConverter();
        String eventId = googleClient.createCalendarEvent(appointmentEventConverter.reverse(appointmentDTO));
        Assert.assertNotNull(eventId);

        Event event = googleClient.getEvent(eventId);
        Assert.assertNotNull(event);
        Assert.assertEquals(event.getId(), eventId);
        Assert.assertEquals(event.getSummary(), APPOINTMENT_TITLE);
        Assert.assertEquals(event.getDescription(), APPOINTMENT_DESCRIPTION);
        Assert.assertEquals(event.getStart().getDateTime().getValue(), startTime.atZone(ZoneId.systemDefault()).toInstant().getEpochSecond() * 1000);
        Assert.assertEquals(event.getEnd().getDateTime().getValue(), endTime.atZone(ZoneId.systemDefault()).toInstant().getEpochSecond() * 1000);
    }

    @Test
    public void createAllDayEvent() throws GeneralSecurityException, IOException {
        AppointmentDTO appointmentDTO = new AppointmentDTO();
        appointmentDTO.setTitle(APPOINTMENT_TITLE);
        appointmentDTO.setDescription(APPOINTMENT_DESCRIPTION);

        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = startTime.plusHours(1);

        appointmentDTO.setStartTime(startTime);
        appointmentDTO.setEndTime(endTime);
        appointmentDTO.setAllDay(true);

        final GoogleClient googleClient = new GoogleClient();
        AppointmentEventConverter appointmentEventConverter = new AppointmentEventConverter();
        String eventId = googleClient.createCalendarEvent(appointmentEventConverter.reverse(appointmentDTO));
        Assert.assertNotNull(eventId);

        Event event = googleClient.getEvent(eventId);
        Assert.assertNotNull(event);
        Assert.assertEquals(event.getId(), eventId);
        Assert.assertEquals(event.getSummary(), APPOINTMENT_TITLE);
        Assert.assertEquals(event.getDescription(), APPOINTMENT_DESCRIPTION);
        Assert.assertEquals(event.getStart().getDate().getValue(), startTime.toLocalDate().atStartOfDay(ZoneId.of("UTC")).toInstant().getEpochSecond() * 1000);
        Assert.assertEquals(event.getEnd().getDate().getValue(), endTime.toLocalDate().atStartOfDay(ZoneId.of("UTC")).toInstant().getEpochSecond() * 1000);
    }
}
